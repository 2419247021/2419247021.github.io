<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Bear的后端成长历程</title>
  
  <subtitle>学习分享</subtitle>
  <link href="http://www.xmcug.top/atom.xml" rel="self"/>
  
  <link href="http://www.xmcug.top/"/>
  <updated>2022-06-04T13:58:18.570Z</updated>
  <id>http://www.xmcug.top/</id>
  
  <author>
    <name>其实我还好</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>求第K小的数</title>
    <link href="http://www.xmcug.top/2022/06/04/%E6%B1%82%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0/"/>
    <id>http://www.xmcug.top/2022/06/04/%E6%B1%82%E7%AC%ACK%E5%B0%8F%E7%9A%84%E6%95%B0/</id>
    <published>2022-06-04T13:57:07.000Z</published>
    <updated>2022-06-04T13:58:18.570Z</updated>
    
    <content type="html"><![CDATA[<h1 id="求第K小的数"><a href="#求第K小的数" class="headerlink" title="求第K小的数"></a>求第K小的数</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>现有 $n$ 个正整数，要求出这 $n$ 个正整数中的第 $k$ 个最小整数（相同大小的整数只计算一次）。</p><h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行为 $n$ 和 $k$; 第二行开始为 $n$ 个正整数的值，整数间用空格隔开。</p><h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>第$k$个最小整数的值；若无解，则输出 <code>NO RESULT</code>。</p><h2 id="样例-1"><a href="#样例-1" class="headerlink" title="样例 #1"></a>样例 #1</h2><h3 id="样例输入-1"><a href="#样例输入-1" class="headerlink" title="样例输入 #1"></a>样例输入 #1</h3><figure class="highlight basic"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs basic"><span class="hljs-symbol">10 </span><span class="hljs-number">3</span><br><span class="hljs-symbol">1 </span><span class="hljs-number">3</span> <span class="hljs-number">3</span> <span class="hljs-number">7</span> <span class="hljs-number">2</span> <span class="hljs-number">5</span> <span class="hljs-number">1</span> <span class="hljs-number">2</span> <span class="hljs-number">4</span> <span class="hljs-number">6</span><br></code></pre></td></tr></table></figure><h3 id="样例输出-1"><a href="#样例输出-1" class="headerlink" title="样例输出 #1"></a>样例输出 #1</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs">3<br></code></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><em>n</em>≤10000，k \leq 1000<em>k</em>≤1000，正整数均小于 3000030000。</p><h2 id="基本思想："><a href="#基本思想：" class="headerlink" title="基本思想："></a>基本思想：</h2><p>采用分治，快速排序内，每一次排序就能确定第x小的数，左边的绝对是小于第x小的数，右边一定是大于第x小的数，判断当前数是否和k相等，如果大于k，只需要看左边的数，否则看右边的数。</p><p>在快排过程中知道小于基准值的数有多少个，大于基准值的数有多少个，从而选取小于或大于基准值的那<strong>一部分</strong>区间继续递归，平均时间复杂度O(n),最坏时间复杂度O(n方）</p><h2 id="代码："><a href="#代码：" class="headerlink" title="代码："></a>代码：</h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs c++"><span class="hljs-comment">//寻找第k小的数</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,idt;<br><span class="hljs-type">int</span> a[<span class="hljs-number">10005</span>];<br><span class="hljs-type">bool</span> flag[<span class="hljs-number">30005</span>];<br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">qsort</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> x=a[l];<br>    <span class="hljs-keyword">while</span> (l&lt;r)<br>    &#123;<br>        <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;a[r]&gt;=x)&#123;<br>            r--;<br>        &#125;<br>        a[l]=a[r];<br>        <span class="hljs-keyword">while</span>(l&lt;r&amp;&amp;a[l]&lt;=x)<br>            l++;<br>        a[r]=a[l];<br>    &#125;<br>    a[l]=x;<br>    <span class="hljs-keyword">return</span> l;<br>&#125;<br><br><span class="hljs-function"><span class="hljs-type">void</span> <span class="hljs-title">find</span><span class="hljs-params">(<span class="hljs-type">int</span> l,<span class="hljs-type">int</span> r)</span></span>&#123;<br>    <span class="hljs-type">int</span> cur=<span class="hljs-built_in">qsort</span>(l,r);<br>    <span class="hljs-keyword">if</span>(cur==k)<br>        cout&lt;&lt;a[k];<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur&lt;k)<br>        <span class="hljs-built_in">find</span>(cur+<span class="hljs-number">1</span>,r);<br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(cur&gt;k)&#123;<br>        <span class="hljs-built_in">find</span>(l,cur<span class="hljs-number">-1</span>);<br>    &#125;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;n&gt;&gt;k;<br>    <span class="hljs-type">int</span> t;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;i++)&#123;<br>        cin&gt;&gt;t;<br>        <span class="hljs-keyword">if</span>(flag[t]==<span class="hljs-number">0</span>)&#123;<br>            a[++idt]=t;<br>            flag[t]=<span class="hljs-number">1</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(idt&lt;k)&#123;<br>        cout&lt;&lt;<span class="hljs-string">&quot;NO RESULT&quot;</span>;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-built_in">find</span>(<span class="hljs-number">1</span>,idt);<br>    <span class="hljs-built_in">system</span>(<span class="hljs-string">&quot;pause&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;求第K小的数&quot;&gt;&lt;a href=&quot;#求第K小的数&quot; class=&quot;headerlink&quot; title=&quot;求第K小的数&quot;&gt;&lt;/a&gt;求第K小的数&lt;/h1&gt;&lt;h2 id=&quot;题目描述&quot;&gt;&lt;a href=&quot;#题目描述&quot; class=&quot;headerlink&quot; title=&quot;题</summary>
      
    
    
    
    
    <category term="二分" scheme="http://www.xmcug.top/tags/%E4%BA%8C%E5%88%86/"/>
    
    <category term="快速排序" scheme="http://www.xmcug.top/tags/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F/"/>
    
    <category term="模板题" scheme="http://www.xmcug.top/tags/%E6%A8%A1%E6%9D%BF%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Ubuntu换源方法以及常见问题解决</title>
    <link href="http://www.xmcug.top/2022/06/02/Ubunt%E6%8D%A2%E6%BA%90%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/"/>
    <id>http://www.xmcug.top/2022/06/02/Ubunt%E6%8D%A2%E6%BA%90%E6%96%B9%E6%B3%95%E4%BB%A5%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E8%A7%A3%E5%86%B3/</id>
    <published>2022-06-02T11:35:41.000Z</published>
    <updated>2022-06-02T11:37:05.337Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Ubuntu换源详解，教你如何换源，并且解决常见的大坑！！！！"><a href="#Ubuntu换源详解，教你如何换源，并且解决常见的大坑！！！！" class="headerlink" title="Ubuntu换源详解，教你如何换源，并且解决常见的大坑！！！！"></a>Ubuntu换源详解，教你如何换源，并且解决常见的大坑！！！！</h1><blockquote><p> 记一次极不愉快的一次经历</p></blockquote><h2 id="首先注意，换源必须选择合适的版本，不可以在网上找一个下载源就直接去换！！！"><a href="#首先注意，换源必须选择合适的版本，不可以在网上找一个下载源就直接去换！！！" class="headerlink" title="首先注意，换源必须选择合适的版本，不可以在网上找一个下载源就直接去换！！！"></a><strong>首先注意，换源必须选择合适的版本，不可以在网上找一个下载源就直接去换！！！</strong></h2><h3 id="出现错误1："><a href="#出现错误1：" class="headerlink" title="出现错误1："></a>出现错误1：</h3><p>由于没有公钥，无法验证下列签名 :NO_PUBKEY</p><p>无法安全地用该源进行更新，所以默认禁用该源</p><p><img src="https://cugdemo.oss-cn-hangzhou.aliyuncs.com/202206021857998.png" alt="image-20220602185733928"></p><p>注意网上可能会有这样的解决方法：</p><p><img src="https://cugdemo.oss-cn-hangzhou.aliyuncs.com/202206021859797.png" alt="image-20220602185926759"></p><p><strong>但是最好不要这样</strong>，我就因为这样以为解决了，结果在安装<code>sudo apt install openssh-server</code>的过程中出现了</p><h3 id="出现错误2："><a href="#出现错误2：" class="headerlink" title="出现错误2："></a>出现错误2：</h3><p>错误1：E:软件包 openssh-server 还没有可供安装的候选者，错误2：E: 无法修正错误，因为您要求某些软件包保持现状，就是它们破坏了软件包间的依赖关系</p><p>这就代表着你目前使用的源和你目前使用的Ubuntu不一致，你需要选择正确的源。</p><p>E: 错误，pkgProblemResolver::Resolve 发生故障，这可能是有软件包被要求保持现状的缘故</p><p><img src="https://cugdemo.oss-cn-hangzhou.aliyuncs.com/202206021919758.png" alt="image-20220602191951729"></p><p><img src="https://cugdemo.oss-cn-hangzhou.aliyuncs.com/202206021918312.png" alt="image-20220602191843283"></p><h2 id="那么我下面将介绍如何选择正确的源去解决上述问题，并且怎么去更新源，最后列出一些常用的源，供大家选择"><a href="#那么我下面将介绍如何选择正确的源去解决上述问题，并且怎么去更新源，最后列出一些常用的源，供大家选择" class="headerlink" title="那么我下面将介绍如何选择正确的源去解决上述问题，并且怎么去更新源，最后列出一些常用的源，供大家选择"></a><strong>那么我下面将介绍如何选择正确的源去解决上述问题，并且怎么去更新源，最后列出一些常用的源，供大家选择</strong></h2><h3 id="选择源"><a href="#选择源" class="headerlink" title="选择源"></a>选择源</h3><p>​首先大家查看自己的Ubuntu版本</p><table><thead><tr><th>系统名</th><th>版本名</th></tr></thead><tbody><tr><td>ubuntu22.04</td><td>jammy</td></tr><tr><td>ubuntu20.04</td><td>focal</td></tr><tr><td>ubuntu18.04</td><td>bionic</td></tr><tr><td>ubuntu16.04</td><td>xenial</td></tr><tr><td>ubuntu14.04</td><td>trusty</td></tr></tbody></table><p>也可以使用<code>lsb_release -c</code>查看</p><p><img src="https://cugdemo.oss-cn-hangzhou.aliyuncs.com/202206021917506.png" alt="image-20220602191716479"></p><p>保证版本和自己的是一样的，比如下面就是20.04的版本<img src="https://cugdemo.oss-cn-hangzhou.aliyuncs.com/202206021926331.png" alt="image-20220602192632296"></p><h3 id="ubuntu-18-04-bionic-配置如下"><a href="#ubuntu-18-04-bionic-配置如下" class="headerlink" title="ubuntu 18.04(bionic) 配置如下"></a>ubuntu 18.04(bionic) 配置如下</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-security main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-updates main restricted universe multiverse<br><br><span class="hljs-comment"># deb http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src http://mirrors.aliyun.com/ubuntu/ bionic-proposed main restricted universe multiverse</span><br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> bionic-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><h3 id="ubuntu-20-04-focal-配置如下"><a href="#ubuntu-20-04-focal-配置如下" class="headerlink" title="ubuntu 20.04(focal) 配置如下"></a>ubuntu 20.04(focal) 配置如下</h3><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs awk">deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-security main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-security main restricted universe multiverse<br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-updates main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-updates main restricted universe multiverse<br><br><span class="hljs-comment"># deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class="hljs-comment"># deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><br>deb http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-backports main restricted universe multiverse<br>deb-src http:<span class="hljs-regexp">//mi</span>rrors.aliyun.com<span class="hljs-regexp">/ubuntu/</span> focal-backports main restricted universe multiverse<br></code></pre></td></tr></table></figure><p>剩余的可以去阿里云官方网站去找：</p><p><a href="https://developer.aliyun.com/mirror/ubuntu">https://developer.aliyun.com/mirror/ubuntu</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;Ubuntu换源详解，教你如何换源，并且解决常见的大坑！！！！&quot;&gt;&lt;a href=&quot;#Ubuntu换源详解，教你如何换源，并且解决常见的大坑！！！！&quot; class=&quot;headerlink&quot; title=&quot;Ubuntu换源详解，教你如何换源，并且解决常见的大坑！！！</summary>
      
    
    
    
    
    <category term="Ubuntu" scheme="http://www.xmcug.top/tags/Ubuntu/"/>
    
    <category term="Linux" scheme="http://www.xmcug.top/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>判断图是否有环</title>
    <link href="http://www.xmcug.top/2022/05/31/%E5%88%A4%E6%96%AD%E5%9B%BE%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/"/>
    <id>http://www.xmcug.top/2022/05/31/%E5%88%A4%E6%96%AD%E5%9B%BE%E6%98%AF%E5%90%A6%E6%9C%89%E7%8E%AF/</id>
    <published>2022-05-31T13:37:56.000Z</published>
    <updated>2022-05-31T13:46:40.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拓扑排序（可判断是否有环）"><a href="#拓扑排序（可判断是否有环）" class="headerlink" title="拓扑排序（可判断是否有环）"></a>拓扑排序（可判断是否有环）</h1><p>定义：</p><p>​把一个 有向无环图 转成 线性的排序 就叫 <strong>拓扑排序</strong></p><p>大致思路：</p><p>​对 DAG （有向无环图）的顶点进行排序，使得对每一条有向边 (u, v)，均有 u（在排序记录中）比 v 先出现。亦可理解为对某点 v而言，只有当 v 的所有源点均出现了，v 才能出现。</p><p>​如果是有环图的话，最后会只剩下环，没有入度为零的节点。</p><h2 id="数据结构"><a href="#数据结构" class="headerlink" title="数据结构"></a>数据结构</h2><p><strong>构造有向图，描述依赖关系</strong></p><h2 id="方法BFS"><a href="#方法BFS" class="headerlink" title="方法BFS"></a>方法<strong>BFS</strong></h2><p>算法流程：</p><ol><li>统计课程安排图中每个节点的入度，生成 入度表 indegrees。</li><li>借助一个队列 queue，将所有入度为 0 的节点入队。</li><li>当 queue 非空时，依次将队首节点出队，在课程安排图中删除此节点 pre：</li><li>并不是真正从邻接表中删除此节点 pre，而是将此节点对应所有邻接节点 cur 的入度 -1−1，即 indegrees[cur] -&#x3D; 1。</li><li>当入度 -1−1后邻接节点 cur 的入度为 00，说明 cur 所有的前驱节点已经被 “删除”，此时将 cur 入队。</li><li>在每次 pre 出队时，执行 numCourses–；</li><li>若整个课程安排图是有向无环图（即可以安排），则所有节点一定都入队并出队过，即完成拓扑排序。换个角度说，若课程安排图中存在环，一定有节点的入度始终不为 00。</li><li>因此，拓扑排序出队次数等于课程个数，返回 numCourses &#x3D;&#x3D; 0 判断课程是否可以成功安排。</li></ol><h1 id="使用DFS判断是否有环"><a href="#使用DFS判断是否有环" class="headerlink" title="使用DFS判断是否有环"></a>使用DFS判断是否有环</h1><p>算法流程：</p><ol><li><p>借助一个标志列表 flags，用于判断每个节点 i （课程）的状态：</p><ol><li>未被 DFS 访问：i &#x3D;&#x3D; 0；</li><li>已被其他节点启动的 DFS 访问：i &#x3D;&#x3D; -1；</li><li>已被当前节点启动的 DFS 访问：i &#x3D;&#x3D; 1。</li></ol></li><li><p>对 numCourses 个节点依次执行 DFS，判断每个节点起步 DFS 是否存在环，若存在环直接返回 FalseFalse。DFS 流程；</p><ol><li><p>终止条件：</p><ul><li><p>当 flag[i] &#x3D;&#x3D; -1，说明当前访问节点已被其他节点启动的 DFS 访问，无需再重复搜索，直接返回 TrueTrue。</p></li><li><p>当 flag[i] &#x3D;&#x3D; 1，说明在本轮 DFS 搜索中节点 i 被第 22 次访问，即 课程安排图有环 ，直接返回 FalseFalse。</p></li></ul></li><li><p>将当前访问节点 i 对应 flag[i] 置 11，即标记其被本轮 DFS 访问过；</p></li><li><p>递归访问当前节点 i 的所有邻接节点 j，当发现环直接返回 FalseFalse；</p></li><li><p>当前节点所有邻接节点已被遍历，并没有发现环，则将当前节点 flag 置为 -1−1 并返回 TrueTrue。</p></li></ol></li><li><p>若整个图 DFS 结束并未发现环，返回 TrueTrue。</p></li></ol>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;拓扑排序（可判断是否有环）&quot;&gt;&lt;a href=&quot;#拓扑排序（可判断是否有环）&quot; class=&quot;headerlink&quot; title=&quot;拓扑排序（可判断是否有环）&quot;&gt;&lt;/a&gt;拓扑排序（可判断是否有环）&lt;/h1&gt;&lt;p&gt;定义：&lt;/p&gt;
&lt;p&gt;​	把一个 有向无环图 转成 </summary>
      
    
    
    
    
    <category term="图论" scheme="http://www.xmcug.top/tags/%E5%9B%BE%E8%AE%BA/"/>
    
    <category term="拓扑排序" scheme="http://www.xmcug.top/tags/%E6%8B%93%E6%89%91%E6%8E%92%E5%BA%8F/"/>
    
  </entry>
  
  <entry>
    <title>java数组</title>
    <link href="http://www.xmcug.top/2022/05/24/java/"/>
    <id>http://www.xmcug.top/2022/05/24/java/</id>
    <published>2022-05-24T06:25:35.000Z</published>
    <updated>2022-05-31T04:39:33.725Z</updated>
    
    <content type="html"><![CDATA[<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><h2 id="1-1一维数组"><a href="#1-1一维数组" class="headerlink" title="1.1一维数组"></a>1.1<strong>一维数组</strong></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> num;<span class="hljs-comment">//声明</span><br>num = <span class="hljs-number">10</span>;<span class="hljs-comment">//初始化</span><br><span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> <span class="hljs-number">1001</span>;<span class="hljs-comment">//声明 + 初始化</span><br><br><span class="hljs-type">int</span>[] ids;<span class="hljs-comment">//声明</span><br><span class="hljs-comment">//1.1 静态初始化:数组的初始化和数组元素的赋值操作同时进行</span><br>ids = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1001</span>,<span class="hljs-number">1002</span>,<span class="hljs-number">1003</span>,<span class="hljs-number">1004</span>&#125;;<br><span class="hljs-comment">//1.2动态初始化:数组的初始化和数组元素的赋值操作分开进行</span><br>String[] names = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">5</span>];<br><br><span class="hljs-type">int</span>[] arr4 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;;<span class="hljs-comment">//类型推断</span><br></code></pre></td></tr></table></figure><p>​<strong>可以使用的函数方法</strong></p><p><img src="C:\Users\dd241\AppData\Roaming\Typora\typora-user-images\image-20220530172229359.png"></p><p>​<strong>内存解析</strong></p><hr><p>​栈，堆，方法区</p><p>​栈：局部变量</p><p>​堆：new出来的（对象数组等）</p><p>​方法区：常量池，静态域等</p><hr><p>​<img src="C:\Users\dd241\AppData\Roaming\Typora\typora-user-images\image-20220530173958772.png" alt="image-20220530173958772"></p><h2 id="1-2二维数组"><a href="#1-2二维数组" class="headerlink" title="1.2二维数组"></a>1.2二维数组</h2><ul><li>声明初始化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<span class="hljs-comment">//一维数组</span><br><span class="hljs-comment">//静态初始化</span><br><span class="hljs-type">int</span>[][] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br><span class="hljs-comment">//动态初始化1</span><br>String[][] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>][<span class="hljs-number">2</span>];<br><span class="hljs-comment">//动态初始化2</span><br>String[][] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>[<span class="hljs-number">3</span>][];<br><span class="hljs-comment">//也是正确的写法：</span><br><span class="hljs-type">int</span>[] arr4[] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<br><span class="hljs-type">int</span>[] arr5[] = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,&#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>&#125;,&#123;<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">8</span>&#125;&#125;;<span class="hljs-comment">//类型推断</span><br>错误的方式：<br><span class="hljs-comment">//String[][] arr4 = new String[][4];</span><br><span class="hljs-comment">//String[4][3] arr5 = new String[][];</span><br><span class="hljs-comment">//int[][] arr6 = new int[4][3]&#123;&#123;1,2,3&#125;,&#123;4,5&#125;,&#123;6,7,8&#125;&#125;;</span><br></code></pre></td></tr></table></figure><ul><li>内存结构</li></ul><p><img src="C:\Users\dd241\AppData\Roaming\Typora\typora-user-images\image-20220530174959305.png" alt="image-20220530174959305"></p><ul><li>数组的赋值和复制</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] array1,array2;<br>array1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-comment">//赋值：</span><br>array2 = array1;<br><span class="hljs-comment">//复制：</span><br>array2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[array1.length];<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; array2.length;i++)&#123;<br>array2[i] = array1[i];<br>&#125;<br></code></pre></td></tr></table></figure><p><img src="C:\Users\dd241\AppData\Roaming\Typora\typora-user-images\image-20220530175333635.png" alt="image-20220530175333635"></p><p><img src="C:\Users\dd241\AppData\Roaming\Typora\typora-user-images\image-20220530175339964.png" alt="image-20220530175339964"></p><h2 id="1-3Arrays常见工具类"><a href="#1-3Arrays常见工具类" class="headerlink" title="1.3Arrays常见工具类"></a>1.3Arrays常见工具类</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.boolean equals(int[] a,int[] b):判断两个数组是否相等。</span><br><span class="hljs-type">int</span>[] arr1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">int</span>[] arr2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>&#125;;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">isEquals</span> <span class="hljs-operator">=</span> Arrays.equals(arr1, arr2);<br>System.out.println(isEquals);<br><br><span class="hljs-comment">//2.String toString(int[] a):输出数组信息。</span><br>System.out.println(Arrays.toString(arr1));<br><br><br><span class="hljs-comment">//3.void fill(int[] a,int val):将指定值填充到数组之中。</span><br>Arrays.fill(arr1,<span class="hljs-number">10</span>);<br>System.out.println(Arrays.toString(arr1));<br><br><br><span class="hljs-comment">//4.void sort(int[] a):对数组进行排序。</span><br>Arrays.sort(arr2);<br>System.out.println(Arrays.toString(arr2));<br><br><span class="hljs-comment">//5.int binarySearch(int[] a,int key)</span><br><span class="hljs-type">int</span>[] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;-<span class="hljs-number">98</span>,-<span class="hljs-number">34</span>,<span class="hljs-number">2</span>,<span class="hljs-number">34</span>,<span class="hljs-number">54</span>,<span class="hljs-number">66</span>,<span class="hljs-number">79</span>,<span class="hljs-number">105</span>,<span class="hljs-number">210</span>,<span class="hljs-number">333</span>&#125;;<br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr3, <span class="hljs-number">210</span>);<br><span class="hljs-keyword">if</span>(index &gt;= <span class="hljs-number">0</span>)&#123;<br>System.out.println(index);<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>System.out.println(<span class="hljs-string">&quot;未找到&quot;</span>);<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;1-数组&quot;&gt;&lt;a href=&quot;#1-数组&quot; class=&quot;headerlink&quot; title=&quot;1.数组&quot;&gt;&lt;/a&gt;1.数组&lt;/h1&gt;&lt;h2 id=&quot;1-1一维数组&quot;&gt;&lt;a href=&quot;#1-1一维数组&quot; class=&quot;headerlink&quot; title=&quot;1.1</summary>
      
    
    
    
    
    <category term="Java" scheme="http://www.xmcug.top/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>test</title>
    <link href="http://www.xmcug.top/2022/05/24/test/"/>
    <id>http://www.xmcug.top/2022/05/24/test/</id>
    <published>2022-05-24T06:25:35.000Z</published>
    <updated>2022-06-12T09:44:44.447Z</updated>
    
    <content type="html"><![CDATA[<p>Hello World！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;Hello World！&lt;/p&gt;
</summary>
      
    
    
    
    
  </entry>
  
</feed>
